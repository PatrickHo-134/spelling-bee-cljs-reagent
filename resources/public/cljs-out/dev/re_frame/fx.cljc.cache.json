["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$console","~$re-frame.loggers","~$set-timeout!","~$re-frame.interop"],"~:excludes",["~#set",[]],"~:name","~$re-frame.fx","~:imports",null,"~:requires",["^ ","^8","^8","~$re-frame.interceptor","^?","~$re-frame.events","^@","~$re-frame.trace","^A","~$re-frame.registrar","^B","~$router","~$re-frame.router","^D","^D","~$trace","^A","~$events","^@","^6","^6","~$re-frame.db","^G"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^5","^6","~$app-db","^G","~$->interceptor","^?","^7","^8","~$get-handler","^B","~$clear-handlers","^B","~$register-handler","^B"],"~:defs",["^ ","~$kind",["^ ","^;","~$re-frame.fx/kind","~:file","resources\\public\\cljs-out\\dev\\re_frame\\fx.cljc","~:line",15,"~:column",1,"~:end-line",15,"~:end-column",10,"~:meta",["^ ","^R","D:\\Learning-corner\\Clojure_training\\applications\\spelling-bee\\resources\\public\\cljs-out\\dev\\re_frame\\fx.cljc","^S",15,"^T",6,"^U",15,"^V",10],"~:tag","~$cljs.core/Keyword"],"~$reg-fx",["^ ","~:protocol-inline",null,"^W",["^ ","^R","D:\\Learning-corner\\Clojure_training\\applications\\spelling-bee\\resources\\public\\cljs-out\\dev\\re_frame\\fx.cljc","^S",18,"^T",7,"^U",18,"^V",13,"~:arglists",["~#list",["~$quote",["^11",[["~$id","~$handler"]]]]]],"^;","~$re-frame.fx/reg-fx","^R","resources\\public\\cljs-out\\dev\\re_frame\\fx.cljc","^V",13,"~:method-params",["^11",[["^13","^14"]]],"~:protocol-impl",null,"~:arglists-meta",["^11",[null,null]],"^T",1,"~:variadic?",false,"^S",18,"~:ret-tag","~$any","^U",18,"~:max-fixed-arity",2,"~:fn-var",true,"^10",["^11",["^12",["^11",[["^13","^14"]]]]]],"~$do-fx",["^ ","^;","~$re-frame.fx/do-fx","^R","resources\\public\\cljs-out\\dev\\re_frame\\fx.cljc","^S",24,"^T",1,"^U",24,"^V",11,"^W",["^ ","^R","D:\\Learning-corner\\Clojure_training\\applications\\spelling-bee\\resources\\public\\cljs-out\\dev\\re_frame\\fx.cljc","^S",24,"^T",6,"^U",24,"^V",11],"~:doc","An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.","^X","~$cljs.core/IMap"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^E","^A","^A","^A"],"~:cljs.analyzer/constants",["^ ","~:seen",["^:",["~:db","~:do-fx","~:start","~:dispatch-n","~:duration","~:deregister-event-handler","~:dispatch","~:after","~:event/do-fx","~:id","~:effects","~:error","~:end","~:ms","~:fx","~:op-type","~:dispatch-later"]],"~:order",["^1T","^1O","^1G","^1M","^1U","^1N","^1H","^1J","^1R","^1P","^1Q","^1V","^1S","^1L","^1I","^1K","^1F"]],"^1@",null]